/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package appWarung;

import java.sql.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class CheckOut extends javax.swing.JFrame {
    

    koneksiDB DB = new koneksiDB();
    
    private DefaultTableModel model;
    
    public void tampilCombo(){
        
        String temp = (String) tipemenu.getSelectedItem();
        
        try {
            
            Connection conn = DB.getConnection();
            Statement stm = conn.createStatement();
            String sql = "SELECT namaMenu FROM daftarmenu WHERE tipeMenu='"
                    + temp +"' ORDER BY idMenu ASC";
            ResultSet rs = stm.executeQuery(sql);
            
            if(temp.equals("Makanan")){
                
                
                while(rs.next()){
                    
                    tipemenu.removeAllItems();
                    String nama_menu = rs.getString("namaMenu");
                    menu.addItem(nama_menu);

                }
            
            } else if(temp.equals("Minuman")){
                
                tipemenu.removeAllItems();
                
                while(rs.next()){
                
                    String nama_menu = rs.getString("namaMenu");
                    menu.addItem(nama_menu);

                }
                
            }
            
        } catch (SQLException e) {
            
            JOptionPane.showMessageDialog(this, e.getMessage());
            
        }
        
    }
    
    public void clear(){
        
        tipemenu.setSelectedItem("Pilih Tipe");
        menu.setSelectedItem("Pilih Menu");
        harga.setText("");
        nominal.setText("");
        
    }
    
    
    public CheckOut() {
        initComponents();
        
        tampilCombo();
        clear();
        
        model = new DefaultTableModel();
        
        tabelPembelian.setModel(model);
        
        model.addColumn("Nama Menu");
        model.addColumn("Harga");
        model.addColumn("Nominal");
        model.addColumn("Total");
        
        
        harga.setEnabled(false);
        nama.setEnabled(false);
        btnUbah.setEnabled(false);
        btnHapus.setEnabled(false);
        btnBatal.setEnabled(false);
        totalPembelian.setEnabled(false);
        totalBayar.setEnabled(false);
        kembalian.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btnKeluar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        harga = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        kembalian = new javax.swing.JTextField();
        totalPembelian = new javax.swing.JTextField();
        uangPembayaran = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        nominal = new javax.swing.JTextField();
        menu = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        totalBayar = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JButton();
        btnBayar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelPembelian = new javax.swing.JTable();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 0, 153));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnKeluar.setText("Keluar");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        jPanel3.add(btnKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 300));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Daftar Menu");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Menu Tipe");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 52, -1, -1));

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Harga");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 113, -1, -1));

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText(":");
        jLabel5.setMaximumSize(null);
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 82, 10, -1));

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText(":");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 173, 10, -1));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Nama");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 173, -1, -1));

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText(":");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 52, 10, -1));

        harga.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        harga.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        harga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hargaActionPerformed(evt);
            }
        });
        jPanel1.add(harga, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 255, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 330, 20));

        kembalian.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        kembalian.setForeground(new java.awt.Color(51, 51, 51));
        kembalian.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        kembalian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembalianActionPerformed(evt);
            }
        });
        jPanel1.add(kembalian, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 220, -1));

        totalPembelian.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        totalPembelian.setForeground(new java.awt.Color(51, 51, 51));
        totalPembelian.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        totalPembelian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPembelianActionPerformed(evt);
            }
        });
        jPanel1.add(totalPembelian, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 220, -1));

        uangPembayaran.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        uangPembayaran.setForeground(new java.awt.Color(51, 51, 51));
        uangPembayaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uangPembayaranActionPerformed(evt);
            }
        });
        jPanel1.add(uangPembayaran, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 220, -1));

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Total Pembelian : ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Uang Kembalian : ");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, -1, -1));

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Uang Pembayaran : ");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        nama.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        nama.setForeground(new java.awt.Color(51, 51, 51));
        nama.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });
        jPanel1.add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, 255, -1));

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("kuantitas");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 143, -1, -1));

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText(":");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 143, 10, -1));

        jLabel14.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("Pilih Menu");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 82, -1, -1));

        nominal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        nominal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nominalActionPerformed(evt);
            }
        });
        jPanel1.add(nominal, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 255, -1));

        menu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        menu.setForeground(new java.awt.Color(51, 51, 51));
        menu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Menu" }));
        menu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                menuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                menuPopupMenuWillBecomeVisible(evt);
            }
        });
        menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                menuMouseExited(evt);
            }
        });
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });
        jPanel1.add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 255, -1));

        tipemenu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tipemenu.setForeground(new java.awt.Color(51, 51, 51));
        tipemenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Tipe", "Makanan", "Minuman" }));
        tipemenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                tipemenuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                tipemenuPopupMenuWillBecomeVisible(evt);
            }
        });
        jPanel1.add(tipemenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 255, -1));

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText(":");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 113, -1, -1));

        jLabel16.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("Total Bayar : ");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        totalBayar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        totalBayar.setForeground(new java.awt.Color(51, 51, 51));
        totalBayar.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        totalBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBayarActionPerformed(evt);
            }
        });
        jPanel1.add(totalBayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 220, -1));

        btnSimpan.setBackground(new java.awt.Color(0, 0, 153));
        btnSimpan.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        jPanel1.add(btnSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 100, 30));

        btnBayar.setBackground(new java.awt.Color(0, 0, 153));
        btnBayar.setForeground(new java.awt.Color(255, 255, 255));
        btnBayar.setText("Bayar");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 80, 50));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(500, 300));
        jPanel2.setMinimumSize(new java.awt.Dimension(500, 300));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 300));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);
        jScrollPane2.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        tabelPembelian.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tabelPembelian.setForeground(new java.awt.Color(51, 51, 51));
        tabelPembelian.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Nama Menu", "Harga", "Nominal", "Total"
            }
        ));
        tabelPembelian.setToolTipText("");
        tabelPembelian.setRowHeight(30);
        tabelPembelian.setShowHorizontalLines(true);
        tabelPembelian.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelPembelianMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelPembelian);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 488, 430));

        btnUbah.setBackground(new java.awt.Color(0, 0, 153));
        btnUbah.setForeground(new java.awt.Color(255, 255, 255));
        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });
        jPanel2.add(btnUbah, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 440, 80, 30));

        btnHapus.setBackground(new java.awt.Color(0, 0, 153));
        btnHapus.setForeground(new java.awt.Color(255, 255, 255));
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        jPanel2.add(btnHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 440, 80, 30));

        btnBatal.setBackground(new java.awt.Color(0, 0, 153));
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setText("Batal");
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });
        jPanel2.add(btnBatal, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, 80, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kembalianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kembalianActionPerformed

    }//GEN-LAST:event_kembalianActionPerformed

    private void totalPembelianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalPembelianActionPerformed

    }//GEN-LAST:event_totalPembelianActionPerformed

    private void uangPembayaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uangPembayaranActionPerformed

        int total, bayar, kembaliann;
    
    // Mengambil nilai dari komponen input
        bayar = Integer.valueOf(uangPembayaran.getText());
        total = Integer.valueOf(totalBayar.getText());

        // Memeriksa apakah uang yang dibayarkan cukup
        if (total > bayar) {
            // Jika tidak cukup, tampilkan pesan kesalahan
            JOptionPane.showMessageDialog(null, "Uang tidak cukup untuk melakukan pembayaran");
            kembalian.setText("0"); // Menampilkan 0 sebagai kembalian
        } else {
            // Jika cukup, hitung kembalian
            kembaliann = bayar - total;
            kembalian.setText(String.valueOf(kembaliann)); // Menampilkan kembalian
        }

    }//GEN-LAST:event_uangPembayaranActionPerformed

    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed

    }//GEN-LAST:event_namaActionPerformed

    private void nominalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nominalActionPerformed

    }//GEN-LAST:event_nominalActionPerformed

    private void menuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_menuPopupMenuWillBecomeInvisible

        String tmp = (String) menu.getSelectedItem();
        String sql = "SELECT hargaa FROM daftarmenu WHERE namaMenu='" + tmp + "'";

        try {

            Connection conn = DB.getConnection();
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(sql);

            if(rs.next()){

                String add = rs.getString("hargaa");
                harga.setText(add);

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, e.getMessage());

        }

    }//GEN-LAST:event_menuPopupMenuWillBecomeInvisible

    private void menuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_menuPopupMenuWillBecomeVisible

    }//GEN-LAST:event_menuPopupMenuWillBecomeVisible

    private void tipemenuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_tipemenuPopupMenuWillBecomeInvisible

        String temp = (String) tipemenu.getSelectedItem();

        try {

            Connection conn = DB.getConnection();
            Statement stm = conn.createStatement();
            String sql = "SELECT namaMenu FROM daftarmenu WHERE tipeMenu='"
            + temp +"' ORDER BY idMenu ASC";
            ResultSet rs = stm.executeQuery(sql);

            menu.removeAllItems();
            menu.addItem("Pilih Menu");

            if(temp.equals("Makanan")){

                while(rs.next()){

                    String nama_menu = rs.getString("namaMenu");
                    menu.addItem(nama_menu);

                }

            } else if(temp.equals("Minuman")){

                while(rs.next()){

                    String nama_menu = rs.getString("namaMenu");
                    menu.addItem(nama_menu);

                }

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, e.getMessage());

        }

    }//GEN-LAST:event_tipemenuPopupMenuWillBecomeInvisible

    private void tipemenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_tipemenuPopupMenuWillBecomeVisible

    }//GEN-LAST:event_tipemenuPopupMenuWillBecomeVisible

    private void totalBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBayarActionPerformed

    }//GEN-LAST:event_totalBayarActionPerformed

    private void tabelPembelianMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelPembelianMouseClicked

        btnSimpan.setEnabled(false);
        btnUbah.setEnabled(true);
        btnHapus.setEnabled(true);
        btnBatal.setEnabled(true);

        int t = tabelPembelian.getSelectedRow();

        if (t == -1) {
            return;
        }

        String nama_menu = (String) model.getValueAt(t, 0);
        String hargaaa = (String) model.getValueAt(t, 1);
        String nominall = (String) model.getValueAt(t, 2);

        try {

            Connection conn = DB.getConnection();
            Statement stm = conn.createStatement();

            String sql = "SELECT tipeMenu FROM daftarmenu WHERE namaMenu='" + nama_menu + "'";
            ResultSet rs = stm.executeQuery(sql);

            if(rs.next()){

                String tipe_menu = rs.getString("tipeMenu");

                if(tipe_menu.equals("Makanan")){

                    tipemenu.setSelectedItem("Makanan");

                } else if(tipe_menu.equals("Minuman")){

                    tipemenu.setSelectedItem("Minuman");

                } else {

                    tipemenu.setSelectedItem("Pilih Tipe");

                }

            }

        } catch(Exception e) {

            System.out.println(e.getMessage());

        }

        menu.setSelectedItem(nama_menu);
        harga.setText(hargaaa);
        nominal.setText(nominall);

    }//GEN-LAST:event_tabelPembelianMouseClicked

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
    String selectedItem = (String) menu.getSelectedItem();
    if (selectedItem != null) {
        Connection conn = null; // Make sure to initialize your connection
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try {
            // Assuming you have a method to get your database connection
            conn = DB.getConnection(); // Replace with your actual method to get a connection
            
            String sql = "SELECT hargaa FROM daftarmenu WHERE namaMenu = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, selectedItem);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                int har = rs.getInt("hargaa");
                harga.setText(String.valueOf(har));
            }
        } catch (Exception e) {
            e.printStackTrace();
            }
        }
    
    }//GEN-LAST:event_menuActionPerformed

    private void hargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hargaActionPerformed

    }//GEN-LAST:event_hargaActionPerformed

    private void menuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuMouseExited

    }//GEN-LAST:event_menuMouseExited

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        // TODO add your handling code here:
        int pernyataan = JOptionPane.showConfirmDialog(null, "Yakin Ingin Keluar?","Konfirmasi",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (pernyataan == JOptionPane.OK_OPTION) {

            int row = tabelPembelian.getRowCount() - 1;

            for (int i = row; i >= 0; i--) {

                Object totalValue = tabelPembelian.getValueAt(i, 3);
                int total = Integer.parseInt(totalValue.toString());
                String nama_menu = (String) model.getValueAt(i, 0);

                try {

                    Connection conn = DB.getConnection();
                    Statement pr = conn.createStatement();
                    String sql1 = "UPDATE daftarmenu SET total = total - " + total +
                    " WHERE namaMenu='" + nama_menu + "'";
                    pr.executeUpdate(sql1);
                    pr.close();

                } catch(Exception e) {

                    System.out.println(e.getMessage());

                }

                model.removeRow(i);

            }

            this.dispose();
            login direct = new login();
            direct.setVisible(true);

        } if (pernyataan == JOptionPane.CANCEL_OPTION) {

        }
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
        String tipe_menu = (String) tipemenu.getSelectedItem();
            
        if(tipe_menu == "Pilih Tipe"){
            
            JOptionPane.showMessageDialog(null, "Pilih Tipe Menu Yang Benar!");
            
        } else if(menu.getSelectedItem().equals("Pilih Menu")){
            
            JOptionPane.showMessageDialog(null, "Pilih Menu Yang Benar!");
            
        } else if(nominal.getText().equals("")){
            
            JOptionPane.showMessageDialog(null, "Nominal Tidak Boleh Kosong!");
            
        } else if(!nominal.getText().matches("[0-9]*")){
            
            JOptionPane.showMessageDialog(null, "Field Nominal Harus Angka!");
            
        } else {
            
            String uname = (String) nama.getText();
            int a = Integer.parseInt(harga.getText());
            int b = Integer.parseInt(nominal.getText());
            int total = a * b;

            String[] dataTable = new String[4];
            dataTable[0] = ("" + menu.getSelectedItem());
            dataTable[1] = ("" + harga.getText());
            dataTable[2] = ("" + nominal.getText());
            dataTable[3] = ("" + total);

            model.addRow(dataTable);

            int row = tabelPembelian.getRowCount();

            int totalBiaya = 0;

            for (int i = 0; i < row; i++) {

                total = Integer.parseInt(tabelPembelian.getValueAt(i, 3).toString());
                totalBiaya = totalBiaya + total;

            }

            int simpanvalue = total;
            String nama_menu = (String) menu.getSelectedItem();
            
            try {
            
                Connection conn = DB.getConnection();
                String sql = "UPDATE daftarmenu SET total = total + " + simpanvalue +
                        " WHERE namaMenu='" + nama_menu + "'";
                Statement pr = conn.createStatement();
                pr.executeUpdate(sql);

                pr.close();

                btnSimpan.setEnabled(true);
                btnUbah.setEnabled(false);
                btnHapus.setEnabled(false);
                btnBatal.setEnabled(false);

            } catch(Exception e) {

                System.out.println(e.getMessage());

            }

            try {

                Connection conn = DB.getConnection();
                Statement stm = conn.createStatement();

                String sql = "SELECT tipeUser FROM auth WHERE username='" + uname + "'";
                ResultSet rs = stm.executeQuery(sql);

                if(rs.next()){

                    String tipeuser = rs.getString("tipeUser");

                    if(tipeuser.equals("pelanggan")){

                        int totalAkhir;
                        totalAkhir = (int) (totalBiaya - (totalBiaya * 0.1));
                        totalBayar.setText(String.valueOf(totalAkhir));

                    } else if(tipeuser.equals("pembeli")){

                        totalBayar.setText(String.valueOf(totalBiaya));

                    }

                }

            } catch(Exception e) {

                System.out.println(e.getMessage());

            }
            
            totalPembelian.setText(String.valueOf(totalBiaya));
            uangPembayaran.setText("");
            kembalian.setText("");

            clear();
        
            
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
        String tipe_menu = (String) tipemenu.getSelectedItem();

        if(tipe_menu == "Pilih Tipe"){

            JOptionPane.showMessageDialog(null, "Pilih Tipe Menu Yang Benar!");

        } else if(menu.getSelectedItem().equals("Pilih Menu")){

            JOptionPane.showMessageDialog(null, "Pilih Menu Yang Benar!");

        } else if(nominal.getText().equals("")){

            JOptionPane.showMessageDialog(null, "Nominal Tidak Boleh Kosong!");

        } else if(!nominal.getText().matches("[0-9]*")){

            JOptionPane.showMessageDialog(null, "Field Nominal Harus Angka!");

        } else {

            String uname = (String) nama.getText();

            int pernyataan = JOptionPane.showConfirmDialog(null, "Yakin Mengubah Data?","Konfirmasi",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (pernyataan == JOptionPane.OK_OPTION) {

                int selRow = tabelPembelian.getSelectedRow();
                Object totalValue = tabelPembelian.getValueAt(selRow, 3);
                Object menuValue = tabelPembelian.getValueAt(selRow, 0);
                String menusimpan = menuValue.toString();
                int simpanvalue = Integer.parseInt(totalValue.toString());

                int a = Integer.parseInt(harga.getText());
                int b = Integer.parseInt(nominal.getText());
                int total = a * b;

                model.setValueAt(menu.getSelectedItem(), tabelPembelian.getSelectedRow(), 0);
                model.setValueAt(harga.getText(), tabelPembelian.getSelectedRow(), 1);
                model.setValueAt(nominal.getText(), tabelPembelian.getSelectedRow(), 2);
                model.setValueAt(total, tabelPembelian.getSelectedRow(), 3);

                int row = tabelPembelian.getRowCount();

                int totalBiaya = 0;

                for (int i = 0; i < row; i++) {

                    total = Integer.parseInt(tabelPembelian.getValueAt(i, 3).toString());
                    totalBiaya = totalBiaya + total;

                }

                int updatevalue = total;
                int update = 0;
                String menuupdate = (String) menu.getSelectedItem();

                if(menusimpan != menuupdate) {

                    try {

                        Connection conn = DB.getConnection();
                        Statement pr = conn.createStatement();

                        String sql1 = "UPDATE daftarmenu SET total = total - " + simpanvalue +
                        " WHERE namaMenu='" + menusimpan + "'";
                        pr.executeUpdate(sql1);

                        simpanvalue = 0;
                        update = updatevalue + simpanvalue;

                        String sql2 = "UPDATE daftarmenu SET total = total + " + update +
                        " WHERE namaMenu='" + menuupdate + "'";
                        pr.executeUpdate(sql2);
                        pr.close();

                    } catch(Exception e) {

                        System.out.println(e.getMessage());

                    }

                } else if(menusimpan == menuupdate) {

                    if(simpanvalue > updatevalue){

                        update = simpanvalue - updatevalue;

                        try {

                            Connection conn = DB.getConnection();
                            String sql = "UPDATE daftarmenu SET total = total - " + update +
                            " WHERE namaMenu='" + menuupdate + "'";
                            Statement pr = conn.createStatement();
                            pr.executeUpdate(sql);

                            pr.close();

                        } catch(Exception e) {

                            System.out.println(e.getMessage());

                        }

                    } else {

                        update = updatevalue - simpanvalue;

                        try {

                            Connection conn = DB.getConnection();
                            String sql = "UPDATE daftarmenu SET total = total + " + update +
                            " WHERE namaMenu='" + menuupdate + "'";
                            Statement pr = conn.createStatement();
                            pr.executeUpdate(sql);

                            pr.close();

                        } catch(Exception e) {

                            System.out.println(e.getMessage());

                        }

                    }

                }

                try {

                    Connection conn = DB.getConnection();
                    Statement stm = conn.createStatement();

                    String sql = "SELECT tipeUser FROM auth WHERE username='" + uname + "'";
                    ResultSet rs = stm.executeQuery(sql);

                    if(rs.next()){

                        String tipeuser = rs.getString("tipeUser");

                        if(tipeuser.equals("pelanggan")){

                            int totalAkhir;
                            totalAkhir = (int) (totalBiaya - (totalBiaya * 0.1));
                            totalBayar.setText(String.valueOf(totalAkhir));

                        } else if(tipeuser.equals("pembeli")){

                            totalBayar.setText(String.valueOf(totalBiaya));

                        }

                    }

                } catch(Exception e) {

                    System.out.println(e.getMessage());

                }

                totalPembelian.setText(String.valueOf(totalBiaya));
                uangPembayaran.setText("");
                kembalian.setText("");

                btnSimpan.setEnabled(false);
                btnUbah.setEnabled(true);
                btnHapus.setEnabled(true);
                btnBatal.setEnabled(true);
                clear();

            } if (pernyataan == JOptionPane.CANCEL_OPTION) {

            }

        }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        String tipe_menu = (String) tipemenu.getSelectedItem();

        if(tipe_menu == "Pilih Tipe"){

            JOptionPane.showMessageDialog(null, "Pilih Tipe Menu Yang Benar!");

        } else if(menu.getSelectedItem().equals("Pilih Menu")){

            JOptionPane.showMessageDialog(null, "Pilih Menu Yang Benar!");

        } else if(nominal.getText().equals("")){

            JOptionPane.showMessageDialog(null, "Nominal Tidak Boleh Kosong!");

        } else if(!nominal.getText().matches("[0-9]*")){

            JOptionPane.showMessageDialog(null, "Field Nominal Harus Angka!");

        } else {

            String uname = (String) nama.getText();

            int pernyataan = JOptionPane.showConfirmDialog(null, "Yakin Menghapus Data?","Konfirmasi",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (pernyataan == JOptionPane.OK_OPTION) {

                int selRow = tabelPembelian.getSelectedRow();
                Object totalValue = tabelPembelian.getValueAt(selRow, 3);
                int simpanvalue = Integer.parseInt(totalValue.toString());

                model.removeRow(tabelPembelian.getSelectedRow());

                int row = tabelPembelian.getRowCount();

                int totalBiaya = 0, total;

                for (int i = 0; i < row; i++) {

                    total = Integer.parseInt(tabelPembelian.getValueAt(i, 3).toString());
                    totalBiaya = totalBiaya + total;

                }

                String menuhapus = (String) menu.getSelectedItem();

                try {

                    Connection conn = DB.getConnection();
                    Statement pr = conn.createStatement();
                    String sql1 = "UPDATE daftarmenu SET total = total - " + simpanvalue +
                    " WHERE namaMenu='" + menuhapus + "'";
                    pr.executeUpdate(sql1);
                    pr.close();

                } catch(Exception e) {

                    System.out.println(e.getMessage());

                }

                try {

                    Connection conn = DB.getConnection();
                    Statement stm = conn.createStatement();

                    String sql = "SELECT tipeUser FROM auth WHERE username='" + uname + "'";
                    ResultSet rs = stm.executeQuery(sql);

                    if(rs.next()){

                        String tipeuser = rs.getString("tipeUser");

                        if(tipeuser.equals("pelanggan")){

                            int totalAkhir;
                            totalAkhir = (int) (totalBiaya - (totalBiaya * 0.1));
                            totalBayar.setText(String.valueOf(totalAkhir));

                        } else if(tipeuser.equals("pembeli")){

                            totalBayar.setText(String.valueOf(totalBiaya));

                        }

                    }

                } catch(Exception e) {

                    System.out.println(e.getMessage());

                }

                totalPembelian.setText(String.valueOf(totalBiaya));
                uangPembayaran.setText("");
                kembalian.setText("");

                clear();
                btnSimpan.setEnabled(true);
                btnUbah.setEnabled(false);
                btnHapus.setEnabled(false);
                btnBatal.setEnabled(false);

            } if (pernyataan == JOptionPane.CANCEL_OPTION) {

            }

        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        // TODO add your handling code here:
        btnSimpan.setEnabled(true);
        btnUbah.setEnabled(false);
        btnHapus.setEnabled(false);
        btnBatal.setEnabled(false);
        clear();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBayarActionPerformed
        // TODO add your handling code here:
        String totalBiaya = totalBayar.getText();
        String uname = nama.getText();
        String bayar = uangPembayaran.getText();
        
        if(bayar == ""){
            
            JOptionPane.showMessageDialog(this, "Masukkan Uang Pembayaran Terlebih Dahulu!");
            
        } else if(!uangPembayaran.getText().matches("[0-9]*")) {
            
            JOptionPane.showMessageDialog(this, "Inputan Harus Berupa Angka!");
            
        } else {
            
            int pernyataan = JOptionPane.showConfirmDialog(null, "Yakin Menyimpan Data?","Konfirmasi", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
            if (pernyataan == JOptionPane.OK_OPTION) {

                try {

                    Connection conn = DB.getConnection();
                    String sql = "UPDATE auth SET totalPembelian= totalPembelian + " + totalBiaya 
                            + " WHERE username='" + uname + "'";
                    Statement pr = conn.createStatement();
                    pr.executeUpdate(sql);
                    pr.close();

                    JOptionPane.showMessageDialog(null, "Check Out Berhasil");

                    login direct = new login();
                    direct.setVisible(true);
                    this.dispose();

                } catch(Exception e) {

                    JOptionPane.showMessageDialog(this, e.getMessage());

                }

            } if (pernyataan == JOptionPane.CANCEL_OPTION) {

            }
            
        }
    }//GEN-LAST:event_btnBayarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUbah;
    private javax.swing.JTextField harga;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField kembalian;
    private javax.swing.JComboBox<String> menu;
    public static final javax.swing.JTextField nama = new javax.swing.JTextField();
    private javax.swing.JTextField nominal;
    private javax.swing.JTable tabelPembelian;
    protected static final javax.swing.JComboBox<String> tipemenu = new javax.swing.JComboBox<>();
    private javax.swing.JTextField totalBayar;
    private javax.swing.JTextField totalPembelian;
    private javax.swing.JTextField uangPembayaran;
    // End of variables declaration//GEN-END:variables
}
